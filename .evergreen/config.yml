##############################################
# Evergreen Template for Drivers Atlas Testing
##############################################

# Run previous commits to pinpoint a failure's origin.
stepback: true

# Fail builds when pre tasks fail.
pre_error_fails_task: true

# Mark failures other than test failures with a purple box.
command_type: system

# Limit maximum test running time.
exec_timeout_secs: 7200   # 2 hours

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    type: system
    params:
      script: |
        ls -la

functions:
  "install astrolabe":
    # Clone astrolabe.
    - command: git.get_project
      type: setup
      params:
        directory: astrolabe-src
    # Make sure virtualenv is installed.
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        continue_on_err: true
        script: |
          echo Using Python: ${PYTHON3_BINARY}
          ${PYTHON3_BINARY} -V
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        command: |
          ${PYTHON3_BINARY} -m pip install virtualenv
    - command: subprocess.exec
      type: system
      params:
        working_dir: astrolabe-src
        continue_on_err: true
        command: |
          cat /etc/resolv.conf
    # Create virtualenv using a CPython 3.5+ binary.
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        command: |
          ${PYTHON3_BINARY} -m virtualenv astrolabevenv
    # Install astrolabe in the created virtualenv.
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        command: |
          astrolabevenv/${PYTHON_BIN_DIR}/pip install -e .

  "install driver":
    # Clone driver source code into the 'astrolabe-src/<driver-repo-name>' directory.
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        command: |
          git clone --depth 1 --recurse-submodules --shallow-submodules --branch ${DRIVER_REVISION} ${DRIVER_REPOSITORY}
    # Install driver on *nix platforms.
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        continue_on_err: true       # Because script may not exist OR platform may not be *nix.
        add_expansions_to_env: true
        command: |
          integrations/${DRIVER_DIRNAME}/install-driver.sh
    # Install driver on Windows.
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        continue_on_err: true       # Because script may not exist OR platform may not be Windows.
        add_expansions_to_env: true
        command: |
          C:/cygwin/bin/sh integrations/${DRIVER_DIRNAME}/install-driver.sh

  "run test":
    # Run the Atlas Planned Maintenance Test.
    - command: subprocess.exec
      type: test
      params:
        working_dir: astrolabe-src
        # Next commands will exit with appropriate status
        continue_on_err: true
        env:
          ATLAS_PROJECT_NAME: ${project}
          CLUSTER_NAME_SALT: ${build_id}
          ATLAS_API_USERNAME: ${atlas_key}
          ATLAS_API_PASSWORD: ${atlas_secret}
          ATLAS_API_BASE_URL: ${atlas_url}
          ATLAS_ORGANIZATION_ID: ${atlas_organization_id}
          ATLAS_ADMIN_API_USERNAME: ${atlas_admin_api_username}
          ATLAS_ADMIN_API_PASSWORD: ${atlas_admin_api_password}
        add_expansions_to_env: true
        command: |
          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe spec-tests run-one --no-delete tests/${TEST_NAME}.yml -e integrations/${DRIVER_DIRNAME}/workload-executor
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        command: |
          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe check-cloud-failure
    - command: subprocess.exec
      type: test
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        command: |
          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe check-success

  "retrieve server logs":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        env:
          ATLAS_PROJECT_NAME: ${project}
          CLUSTER_NAME_SALT: ${build_id}
          ATLAS_API_USERNAME: ${atlas_key}
          ATLAS_API_PASSWORD: ${atlas_secret}
          ATLAS_API_BASE_URL: ${atlas_url}
          ATLAS_ORGANIZATION_ID: ${atlas_organization_id}
          ATLAS_ADMIN_API_USERNAME: ${atlas_admin_api_username}
          ATLAS_ADMIN_API_PASSWORD: ${atlas_admin_api_password}
        add_expansions_to_env: true
        command: |
          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe spec-tests get-logs --only-on-failure tests/${TEST_NAME}.yml

  "validate executor":
    # Run a MongoDB instance locally.
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        script: |
          sh .evergreen/run-mongodb.sh
    # Validate the workload executor against the local MongoDB instance.
    - command: subprocess.exec
      type: test
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        command: |
          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe spec-tests validate-workload-executor -e integrations/${DRIVER_DIRNAME}/workload-executor --connection-string "mongodb://localhost:27017/?serverselectiontimeoutms=10000"

  "delete test cluster":
    # Delete the cluster that was used to run the test.
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        env:
          ATLAS_PROJECT_NAME: ${project}
          CLUSTER_NAME_SALT: ${build_id}
          ATLAS_API_USERNAME: ${atlas_key}
          ATLAS_API_PASSWORD: ${atlas_secret}
          ATLAS_API_BASE_URL: ${atlas_url}
          ATLAS_ORGANIZATION_ID: ${atlas_organization_id}
          ATLAS_ADMIN_API_USERNAME: ${atlas_admin_api_username}
          ATLAS_ADMIN_API_PASSWORD: ${atlas_admin_api_password}
        add_expansions_to_env: true
        command: |
          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe spec-tests delete-cluster tests/${TEST_NAME}.yml

  "upload test results":
    # Evergreen fails tasks when the process exits with success but an xunit
    # file is present with a failure. Delete the files where failures are
    # expected.
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        continue_on_err: true       # Because script may not exist OR platform may not be Windows.
        add_expansions_to_env: true
        script: |
          rm -f xunit-output/failure_*.xml
    # Upload the xunit-format test results.
    - command: attach.xunit_results
      type: setup
      params:
        file: "astrolabe-src/xunit-output/*.xml"

  "upload server logs":
    - command: s3.put
      type: setup
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: astrolabe-src/logs.tar.gz
        remote_file: ${project}/${version_id}/${build_id}-${task_id}-${execution}/server-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"

  "upload event logs":
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        continue_on_err: true       # Because script may not exist OR platform may not be Windows.
        add_expansions_to_env: true
        script: |
          gzip <events.json >events.json.gz
    - command: s3.put
      type: setup
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: astrolabe-src/events.json.gz
        remote_file: ${project}/${version_id}/${build_id}-${task_id}-${execution}/events.json.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "events.json.gz"
    # If gzip doesn't exist (Windows?) upload the uncompressed events also.
    - command: s3.put
      type: setup
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: astrolabe-src/events.json
        remote_file: ${project}/${version_id}/${build_id}-${task_id}-${execution}/events.json
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/json}
        display_name: "events.json"

# Functions to run before the test.
pre:
  - func: "install astrolabe"
  - func: "install driver"

# Functions to run after the test.
post:
  - func: "retrieve server logs"
  - func: "delete test cluster"
  - func: "upload test results"
  - func: "upload server logs"
  - func: "upload event logs"

tasks:
  # Workload executor validation task (patch-only).
  - name: validate-workload-executor
    patch_only: true
    tags: ["all"]
    commands:
      - func: "validate executor"
  # One test-case per task.
  # Use .evergreen/generate-tasks.sh to generate this list.
  - name: failure-read
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: failure-read
  - name: failure-write
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: failure-write
  - name: retryReads-move-sharded
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-move-sharded
  - name: retryReads-move
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-move
  - name: retryReads-primaryRemoval
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-primaryRemoval
  - name: retryReads-primaryTakeover
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-primaryTakeover
  - name: retryReads-processRestart-sharded
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-processRestart-sharded
  - name: retryReads-processRestart
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-processRestart
  - name: retryReads-resizeCluster
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-resizeCluster
  - name: retryReads-testFailover-sharded
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-testFailover-sharded
  - name: retryReads-testFailover
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-testFailover
  - name: retryReads-toggleServerSideJS
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-toggleServerSideJS
  - name: retryReads-vmRestart-sharded
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-vmRestart-sharded
  - name: retryReads-vmRestart
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryReads-vmRestart
  - name: retryWrites-resizeCluster
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryWrites-resizeCluster
  - name: retryWrites-toggleServerSideJS
    tags: ["all"]
    commands:
      - func: "run test"
        vars:
          TEST_NAME: retryWrites-toggleServerSideJS

axes:
  # The 'driver' axis specifies the driver to be tested (including driver version).
  # Drivers MUST specify the DRIVER_REPOSITORY and DRIVER_REVISION variables.
  - id: driver
    display_name: driver
    values:
      - id: pymongo-master
        display_name: "PyMongo (master)"
        variables:
          DRIVER_DIRNAME: "python/pymongo"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-python-driver"
          DRIVER_REVISION: "master"
          PYMONGO_VIRTUALENV_NAME: "pymongotestvenv"
          ASTROLABE_EXECUTOR_STARTUP_TIME: 5
      - id: ruby-master
        display_name: "Ruby (master)"
        variables:
          DRIVER_DIRNAME: "ruby"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-ruby-driver"
          DRIVER_REVISION: "master"
      - id: node-master
        display_name: "Node (master)"
        variables:
          DRIVER_DIRNAME: "node"
          DRIVER_REPOSITORY: "https://github.com/mongodb/node-mongodb-native"
          DRIVER_REVISION: "master"
      - id: java-master
        display_name: "Java (master)"
        variables:
          DRIVER_DIRNAME: "java/sync"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-java-driver"
          DRIVER_REVISION: "master"
          ASTROLABE_EXECUTOR_STARTUP_TIME: 3
      - id: dotnet-master
        display_name: "dotnet (master)"
        variables:
          DRIVER_DIRNAME: "dotnet"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-csharp-driver"
          DRIVER_REVISION: "master"
          ASTROLABE_EXECUTOR_STARTUP_TIME: 40
          DOTNET_CLI_HOME: "Z:/"
          TMP: "Z:/"
          TEMP: "Z:/"
          NUGET_PACKAGES: "Z:/"
          NUGET_HTTP_CACHE_PATH: "Z:/"
          APPDATA: "Z:/"
      - id: go-master
        display_name: "Go (master)"
        variables:
          DRIVER_DIRNAME: "go"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-go-driver"
          DRIVER_REVISION: "master"
      - id: php-master
        display_name: "PHP (master)"
        variables:
          DRIVER_DIRNAME: "php"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-php-library"
          DRIVER_REVISION: "master"
          PHPC_REPOSITORY: "https://github.com/mongodb/mongo-php-driver"
          PHPC_BRANCH: "master"
      - id: rust-main
        display_name: "Rust (main)"
        variables:
          DRIVER_DIRNAME: "rust"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-rust-driver"
          DRIVER_REVISION: "main"
          ASTROLABE_EXECUTOR_STARTUP_TIME: 10

  # The 'platform' axis specifies the evergreen host distro to use.
  # Platforms MUST specify the PYTHON3_BINARY variable as this is required to install astrolabe.
  - id: platform
    display_name: OS
    values:
      - id: ubuntu-18.04
        display_name: "Ubuntu 18.04"
        run_on: ubuntu1804-drivers-atlas-testing
        batchtime: 10080  # 7 days
        variables:
          PYTHON3_BINARY: "/opt/mongodbtoolchain/v4/bin/python3.9"
          PYTHON_BIN_DIR: "bin"
          # Set locale to unicode - needed for astrolabe to function correctly.
          LC_ALL: "C.UTF-8"
          LANG: "C.UTF-8"
      - id: windows-64
        display_name: "Windows 64"
        run_on: windows-64-vsMulti-small
        batchtime: 10080  # 7 days
        variables:
          PYTHON3_BINARY: "C:/python/Python37/python.exe"
          PYTHON_BIN_DIR: "Scripts"

  # The 'runtime' axis specifies the language runtime to use.
  # Runtimes SHOULD specify language and platform-specific variables needed by driver scripts.
  - id: runtime
    display_name: runtime
    values:
      - id: python39
        display_name: CPython-3
        variables:
          PYTHON_BINARY: "/opt/mongodbtoolchain/v4/bin/python3.9"
      - id: python37-windows
        display_name: CPython-3.7-Windows
        variables:
          PYTHON_BINARY: "C:/python/Python37/python.exe"
      - id: node-carbon
        display_name: Node v8 Carbon
        variables:
          NODE_LTS_NAME: "carbon"
      - id: node-dubnium
        display_name: Node v10 Dubnium
        variables:
          NODE_LTS_NAME: "dubnium"
      - id: node-erbium
        display_name: Node v12 Erbium
        variables:
          NODE_LTS_NAME: "erbium"
      - id: java17
        display_name: Java 17
        variables:
          JAVA_HOME: "/opt/java/jdk17"
          PYTHON_BINARY: "/opt/mongodbtoolchain/v4/bin/python3.9"
      - id: dotnet-async-netcoreapp2.1
        display_name: dotnet-async-netcoreapp2.1
        variables:
          ASYNC: "true"
          FRAMEWORK: "netcoreapp2.1"
      - id: "dotnet-sync-netcoreapp2.1"
        display_name: dotnet-sync-netcoreapp2.1
        variables:
          ASYNC: "false"
          FRAMEWORK: "netcoreapp2.1"
      - id: go-15
        display_name: Go v1.15
        variables:
          GOROOT: /opt/golang/go1.15
          GOPATH: /home/ubuntu/go
          PYTHON_BINARY: "/opt/mongodbtoolchain/v4/bin/python3.9"
      - id: php-74
        display_name: PHP 7.4
        variables:
          PHP_VERSION: 7.4
      - id: rust-latest
        display_name: Rust Latest

buildvariants:
- matrix_name: "tests-ruby"
  matrix_spec:
    driver: ["ruby-master"]
    platform: ubuntu-18.04
    runtime: python39
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"

- matrix_name: "tests-python"
  matrix_spec:
    driver: ["pymongo-master"]
    platform: ["ubuntu-18.04"]
    runtime: ["python39"]
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"
- matrix_name: "tests-python-windows"
  matrix_spec:
    driver: ["pymongo-master"]
    platform: ["windows-64"]
    runtime: ["python37-windows"]
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"
# TODO: re-enable language builds once workload executors have been
# re-implemented to work with the new format
#- matrix_name: tests-node
#  matrix_spec:
#    driver:
#      - node-master
#    platform:
#      - ubuntu-18.04
#    runtime:
#      - node-dubnium
#      - node-erbium
#  display_name: "${driver} ${platform} ${runtime}"
#  tasks:
#    - .all
- matrix_name: "tests-java"
  matrix_spec:
    driver: ["java-master"]
    platform: ["ubuntu-18.04"]
    runtime: ["java17"]
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"
- matrix_name: "tests-dotnet-windows"
  matrix_spec:
    driver: ["dotnet-master"]
    platform: ["windows-64"]
    runtime:
      - "dotnet-async-netcoreapp2.1"
      - "dotnet-sync-netcoreapp2.1"
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"
- matrix_name: "tests-go"
  matrix_spec:
    driver: ["go-master"]
    platform: ubuntu-18.04
    runtime: go-15
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"
- matrix_name: "tests-php"
  matrix_spec:
    driver: ["php-master"]
    platform: ubuntu-18.04
    runtime: php-74
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"
- matrix_name: "tests-rust"
  matrix_spec:
    driver: ["rust-main"]
    platform: ubuntu-18.04
    runtime: rust-latest
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
   - ".all"
