########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourselves against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the average-ish length a task takes, times 5.
# That roughly accounts for variable system performance for various build variants.
exec_timeout_secs: 3600   # 1 hour is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "install astrolabe":
    # Clone astrolabe.
    - command: git.get_project
      params:
        directory: astrolabe-src
    # Setup global expansions.
    - command: shell.exec
      params:
        working_dir: astrolabe-src
        script: |
          export ASTROLABE_SRC_DIRECTORY="$(pwd)"
          export ASTROLABE_VIRTUALENV_NAME="astrolabevenv"
          export ASTROLABE_BINARY="$ASTROLABE_SRC_DIRECTORY/$ASTROLABE_VIRTUALENV_NAME/bin/astrolabe"
          cat <<EOT > astrolabe-expansion.yml
          PREPARE_SHELL_COMMON: |
            set -o errexit
            export ASTROLABE_PY3_BINARY="${SYSTEM_PYTHON3_BINARY}"
            export ASTROLABE_VIRTUALENV_NAME="$ASTROLABE_VIRTUALENV_NAME"
            export ASTROLABE_BINARY="$ASTROLABE_BINARY"
            export ATLAS_PROJECT_NAME="${project}"
            export EVERGREEN_BUILD_ID="{build_id}"
            export ATLAS_API_USERNAME="${atlas_key}"
            export ATLAS_API_PASSWORD="${atlas_secret}"
            export TARGET_DRIVER_SCRIPTS_DIRECTORY="$(pwd)/.evergreen/${DRIVER_DIRNAME}"
          EOT
          # Don't print this as it contains credentials.
    - command: expansions.update
      params:
        file: astrolabe-src/astrolabe-expansion.yml
    # Install astrolabe.
    - command: shell.exec
      params:
        working_dir: astrolabe-src
        script: |
          ${PREPARE_SHELL_COMMON}
          sh .evergreen/install-astrolabe.sh
    # Make *.sh files in driver scripts directory executable.
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL_COMMON}
          for i in $(find "$TARGET_DRIVER_SCRIPTS_DIRECTORY" -name \*.sh); do
            chmod +x $i
          done

  "setup driver":
    # Clone driver source code.
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL_COMMON}
          git clone --recursive --branch "${DRIVER_REVISION}" "${DRIVER_REPOSITORY}" driver-src
    # Run driver-supplied script to setup driver.
    - command: shell.exec
      params:
        working_dir: driver-src
        script: |
          ${PREPARE_SHELL_COMMON}
          ${PREPARE_SHELL_DRIVER}
          sh "$TARGET_DRIVER_SCRIPTS_DIRECTORY"/setup-driver.sh

  "run tests":
    # Run the Atlas Planned Maintenance Tests.
    - command: shell.exec
      type: test
      params:
        working_dir:
        script: |
          ${PREPARE_SHELL_COMMON}
          ${PREPARE_SHELL_DRIVER}
          "$ASTROLABE_BINARY" spec-tests run astrolabe-src/temp-tests -e "$TARGET_DRIVER_SCRIPTS_DIRECTORY"/workload-executor.sh --group-name testproject --cluster-name-salt somesalt --no-delete

  "upload test results":
    # Upload the xunit-format test results.
    - command: attach.xunit_results
      params:
        file: "xunit-output/*.xml"

  "ls":
    # Useful command for debugging.
    - command: shell.exec
      params:
        script: |
          ls -la
    - command: shell.exec
      params:
        working_dir: astrolabe-src
        script: |
          ls -la
    - command: shell.exec
      params:
        working_dir: driver-src
        script: |
          ls -la

  "prepare shell pymongo":
    # Setup environment expansions.
    - command: shell.exec
      params:
        script: |
          export PYMONGO_VIRTUALENV_NAME="pymongotestvenv"
          export PYMONGO_PYTHON_RUNTIME="$(pwd)/driver-src/$PYMONGO_VIRTUALENV_NAME/bin/python"
          cat <<EOT > pymongo-expansion.yml
          PREPARE_SHELL_DRIVER: |
            set -o errexit
            export PYTHON_BINARY="${PYTHON_BINARY}"
            export PYMONGO_VIRTUALENV_NAME="$PYMONGO_VIRTUALENV_NAME"
            export PYMONGO_PYTHON_RUNTIME="$PYMONGO_PYTHON_RUNTIME"
          EOT
          # See what we've done
          cat pymongo-expansion.yml
    - command: expansions.update
      params:
        file: pymongo-expansion.yml

pre:
  - func: "install astrolabe"

post:
  - func: "upload test results"
  - func: "ls"

tasks:
    # Tasks specify the driver (including version) to test.
    - name: "pymongo-master"
      commands:
        - func: "prepare shell pymongo"
        - func: "setup driver"
          vars:
            DRIVER_REVISION: master
        - func: "run tests"
    - name: "pymongo-3.10"
      commands:
        - func: "prepare shell pymongo"
        - func: "setup driver"
          vars:
            DRIVER_REVISION: 3.10.1
        - func: "run tests"

axes:
  # Specify the driver to be tested.
  - id: driver
    display_name: driver
    values:
      - id: pymongo
        display_name: pymongo
        variables:
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-python-driver.git"
          DRIVER_DIRNAME: "python"

  # Specify a driver-specific language runtime.
  - id: language-runtime
    display_name: runtime
    values:
      - id: python36
        display_name: py36
        variables:
          PYTHON_BINARY: "/opt/python/3.6/bin/python3"
      - id: python37
        display_name: py37
        variables:
          PYTHON_BINARY: "/opt/python/3.7/bin/python3"
      - id: python38
        display_name: py38
        variables:
          PYTHON_BINARY: "/opt/python/3.8/bin/python3"

  # Specify the platform.
  - id: platform
    display_name: OS
    values:
      - id: ubuntu-16.04
        display_name: "Ubuntu 16.04"
        run_on: ubuntu1604-test
        batchtime: 10080  # 7 days
        variables:
          SYSTEM_PYTHON3_BINARY: "/opt/python/3.7/bin/python3"

buildvariants:
- matrix_name: "tests-python"
  matrix_spec:
    driver: ["pymongo"]
    language-runtime: ["python36", "python37", "python38"]
    platform: ["ubuntu-16.04"]
  display_name: "${driver} ${language-runtime} ${platform}"
  tasks:
    - "pymongo-master"
    - "pymongo-3.10"
