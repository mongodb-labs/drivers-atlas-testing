##############################################
# Evergreen Template for Drivers Atlas Testing
##############################################

# Run previous commits to pinpoint a failure's origin.
stepback: true

# Fail builds when pre and post tasks fail.
pre_error_fails_task: true
post_error_fails_task: true

# Mark failures other than test failures with a purple box.
command_type: system

# Limit maximum test running time.
exec_timeout_secs: 7200   # 2 hours

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    type: system
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Clone astrolabe.
    - command: git.get_project
      type: setup
      params:
        directory: astrolabe-src

  "install astrolabe":
    # Make sure virtualenv is installed.
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        continue_on_err: true
        script: |
          echo Using Python: ${PYTHON3_BINARY}
          ${PYTHON3_BINARY} -V
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        command: |
          ${PYTHON3_BINARY} -m pip install virtualenv
    - command: subprocess.exec
      type: system
      params:
        working_dir: astrolabe-src
        continue_on_err: true
        command: |
          cat /etc/resolv.conf
    # Create virtualenv using a CPython 3.8+ binary.
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        command: |
          ${PYTHON3_BINARY} -m virtualenv astrolabevenv
    # Install astrolabe in the created virtualenv.
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        command: |
          astrolabevenv/${PYTHON_BIN_DIR}/pip install -e .
    # Handle the project name.
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        script: |
          # create a unique atlas project per task and execution.
          # use the timestamp so we can prune old projects.
          # add a random suffix to differentiate clusters.
          timestamp=$(date +%s)
          salt=$(node -e "process.stdout.write((Math.random() + 1).toString(36).substring(2))")
          cat <<EOT > expansion.yml
          ATLAS_PROJECT_NAME: "$project-$timestamp-$salt"
          EOT
    - command: expansions.update
      params:
        file: astrolabe-src/expansion.yml

  "install driver":
    # Clone driver source code into the 'astrolabe-src/<driver-repo-name>' directory.
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        command: |
          git clone --depth 1 --recurse-submodules --shallow-submodules --branch ${DRIVER_REVISION} ${DRIVER_REPOSITORY}
    # Run the install-driver.sh shell script.
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        script: |
          if [ "Windows_NT" = "$OS" ]; then
            C:/cygwin/bin/bash integrations/${DRIVER_DIRNAME}/install-driver.sh
          else
            ./integrations/${DRIVER_DIRNAME}/install-driver.sh
          fi

  "lint and format":
    - command: subprocess.exec
      type: test
      params:
        working_dir: astrolabe-src
        binary: bash
        script: |
          set -eux
          astrolabevenv/bin/activate
          python -m pip install -q pre-commit check-manifest
          pre-commit run --all-files --hook-stage=manual
          check-manifest -v

  "validate executor":
    # Run a MongoDB instance locally.
    - command: shell.exec
      type: setup
      params:
        include_expansions_in_env: ["MONGODB_VERSION"]
        working_dir: astrolabe-src
        script: |
          .evergreen/run-mongodb.sh
    # Validate the workload executor against the local MongoDB instance.
    - command: subprocess.exec
      type: test
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        command: |
          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe validate workload-executor -e integrations/${DRIVER_DIRNAME}/workload-executor --connection-string "mongodb://localhost:27017/?serverselectiontimeoutms=10000"

  "download kubernetes tools":
    # Download all of the tools needed to interact with Kubernetes and Kind to the .bin directory.
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        script: |
          mkdir .bin && cd .bin
          CURL="curl -fsSL --max-time 20 --retry 5 --retry-delay 0 --retry-max-time 60"
          # Download kind.
          $CURL -o kind https://kind.sigs.k8s.io/dl/v0.14.0/kind-linux-amd64
          chmod +x kind
          # Download helm.
          $CURL -O https://get.helm.sh/helm-v3.9.2-linux-amd64.tar.gz
          tar -zxvf helm-v3.9.2-linux-amd64.tar.gz --strip-components 1 linux-amd64/helm
          # Download kubectl.
          $CURL -O https://dl.k8s.io/release/v1.24.0/bin/linux/amd64/kubectl
          chmod +x kubectl
          # Download cmctl.
          $CURL -O https://github.com/cert-manager/cert-manager/releases/download/v1.9.1/cmctl-linux-amd64.tar.gz
          tar -zxvf cmctl-linux-amd64.tar.gz cmctl
          # Download mongosh
          $CURL -O https://downloads.mongodb.com/compass/mongosh-1.5.4-linux-x64.tgz
          tar -zxvf mongosh-1.5.4-linux-x64.tgz --strip-components 2 mongosh-1.5.4-linux-x64/bin/mongosh
          # Download jq.
          $CURL -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x jq
    # Add the .bin directory to the PATH for all tasks using expansions.
    - command: shell.exec
      params:
        working_dir: astrolabe-src
        script: |
          cat <<EOT > expansion.yml
          PATH: "$(pwd)/.bin:$PATH"
          EOT
          # See what we variables we've set.
          cat expansion.yml
    - command: expansions.update
      params:
        file: astrolabe-src/expansion.yml

  "run atlas test":
    # Run the Atlas Planned Maintenance Test.

    # First set up the expansion variables for teardown tasks.
    - command: shell.exec
      type: test
      params:
        working_dir: astrolabe-src
        script: |
          cat <<EOT > expansion.yml
          ATLAS: true
          WORKLOAD_FILE: ${WORKLOAD_FILE}
          TEST_FILE: ${TEST_FILE}
          EOT
          # See what we variables we've set.
          cat expansion.yml
    - command: expansions.update
      params:
        file: astrolabe-src/expansion.yml
    # Then run the test.
    - command: shell.exec
      type: test
      params:
        working_dir: astrolabe-src
        # Next commands will exit with appropriate status
        continue_on_err: true
        env:
          ATLAS_PROJECT_NAME: ${ATLAS_PROJECT_NAME}
          ATLAS_PROJECT_BASE_NAME: ${project}
          CLUSTER_NAME_SALT: ${build_id}
          ATLAS_API_USERNAME: ${atlas_key}
          ATLAS_API_PASSWORD: ${atlas_secret}
          ATLAS_API_BASE_URL: ${atlas_url}
          ATLAS_ORGANIZATION_ID: ${atlas_organization_id}
          ATLAS_ADMIN_API_USERNAME: ${atlas_admin_api_username}
          ATLAS_ADMIN_API_PASSWORD: ${atlas_admin_api_password}
        add_expansions_to_env: true
        script: |
          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe atlas-tests \
            run-one ${TEST_FILE} \
            --workload-file ${WORKLOAD_FILE} \
            --workload-executor integrations/${DRIVER_DIRNAME}/workload-executor \
            --no-delete
    - command: subprocess.exec
      type: setup
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        command: |
          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe check-cloud-failure
    - command: subprocess.exec
      type: test
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        command: |
          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe check-success

  "retrieve atlas logs":
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        env:
          ATLAS_PROJECT_NAME: ${ATLAS_PROJECT_NAME}
          ATLAS_PROJECT_BASE_NAME: ${project}
          CLUSTER_NAME_SALT: ${build_id}
          ATLAS_API_USERNAME: ${atlas_key}
          ATLAS_API_PASSWORD: ${atlas_secret}
          ATLAS_API_BASE_URL: ${atlas_url}
          ATLAS_ORGANIZATION_ID: ${atlas_organization_id}
          ATLAS_ADMIN_API_USERNAME: ${atlas_admin_api_username}
          ATLAS_ADMIN_API_PASSWORD: ${atlas_admin_api_password}
        add_expansions_to_env: true
        script: |
          # Only run after Atlas tasks.
          if [ "${ATLAS}" != "true" ]; then
            echo "Skipping Atlas logs download because it's not a Atlas task."
            exit 0
          fi

          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe atlas-tests \
            get-logs ${TEST_FILE} \
            --workload-file ${WORKLOAD_FILE} \
            --only-on-failure

  "delete atlas cluster":
    # Delete the Atlas cluster that was used to run the test.
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        env:
          ATLAS_PROJECT_NAME: ${ATLAS_PROJECT_NAME}
          ATLAS_PROJECT_BASE_NAME: ${project}
          CLUSTER_NAME_SALT: ${build_id}
          ATLAS_API_USERNAME: ${atlas_key}
          ATLAS_API_PASSWORD: ${atlas_secret}
          ATLAS_API_BASE_URL: ${atlas_url}
          ATLAS_ORGANIZATION_ID: ${atlas_organization_id}
          ATLAS_ADMIN_API_USERNAME: ${atlas_admin_api_username}
          ATLAS_ADMIN_API_PASSWORD: ${atlas_admin_api_password}
        add_expansions_to_env: true
        script: |
          set -eux
          # Only run after Atlas tasks.
          if [ "${ATLAS}" != "true" ]; then
            echo "Skipping Atlas cluster cleanup because it's not a Atlas task."
            exit 0
          fi

          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe atlas-tests \
            delete-cluster ${TEST_FILE} \
            --workload-file ${WORKLOAD_FILE}

  "create kind cluster":
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        script: |
          ./kubernetes/kind/create.sh

  # Note that "run kind test" must be run in the same task as the "create kind cluster" function
  # because Evergreen cleans up processes and Docker state changes between tasks (except in task
  # groups where "share_processes=true").
  "run kind test":
    # Run a test using a Kind cluster.
    - command: shell.exec
      type: test
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        script: |
          # If there is a KIND_CONNSTRING provided by the driver task, use that as the connection
          # string. Otherwise, use the standard connection string that works for most drivers.
          if [ ! -z "${KIND_CONNSTRING}" ]; then
            CONNSTRING="${KIND_CONNSTRING}"
          else
            # Use absolute paths to the TLS cert and CA files in the connection string. Not all
            # drivers evaluate relative paths in the connection string from the same directory, so
            # using relative paths can be tricky. The "mongodb_tls_cert.pem" file is written by the
            # "kubernetes/kind/create.sh" script.
            CERT_PATH="$(pwd)/mongodb_tls_cert.pem"
            CA_PATH="$(pwd)/kubernetes/kind/rootCA.pem"
            CONNSTRING="mongodb://user:12345@localhost:31181,localhost:31182,localhost:31183/admin?tls=true&tlsCertificateKeyFile=$CERT_PATH&tlsCAFile=$CA_PATH"
          fi

          astrolabevenv/${PYTHON_BIN_DIR}/astrolabe kubernetes-tests \
            run-one ${TEST_FILE} \
            --workload-file ${WORKLOAD_FILE} \
            --workload-executor integrations/${DRIVER_DIRNAME}/workload-executor \
            --connection-string "$CONNSTRING"

  # Note that "retrieve kind logs" must be run in the same task as the "create kind cluster"
  # function because Evergreen cleans up processes and Docker state changes between tasks (except in
  # task groups where "share_processes=true").
  "retrieve kind logs":
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        script: |
          set -e

          # Download the logs from all pods to corresponding .log files.
          ./kubernetes/kind/download_logs.sh

          # Then write all the log files to a gzip-compressed tarball named logs.tar.gz.
          tar -zcvf logs.tar.gz *.log

  # Note that "delete kind cluster" must be run in the same task as the "create kind cluster"
  # function because Evergreen cleans up processes and Docker state changes between tasks (except in
  # task groups where "share_processes=true").
  "delete kind cluster":
    # Delete the Kind cluster that was used for the test.
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        script: |
          ./kubernetes/kind/delete.sh

  "upload test results":
    # Evergreen fails tasks when the process exits with success but an xunit
    # file is present with a failure. Delete the files where failures are
    # expected.
    # Also ensure there is at least one xml file, so that the upload step does not fail.
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        add_expansions_to_env: true
        script: |
          mkdir -p xunit-output
          rm -rf xunit-output/failure_*.xml
          echo "<?xml version='1.0' encoding='utf-8'?><testsuites></testsuites>" > xunit-output/test.xml
    # Upload the xunit-format test results.
    - command: attach.xunit_results
      type: setup
      params:
        file: "astrolabe-src/xunit-output/*.xml"

  "upload server logs":
    - command: s3.put
      type: setup
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: astrolabe-src/logs.tar.gz
        remote_file: ${project}/${version_id}/${build_id}-${task_id}-${execution}/server-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"
        optional: true

  "upload event logs":
    - command: shell.exec
      type: setup
      params:
        working_dir: astrolabe-src
        continue_on_err: true       # Because script may not exist OR platform may not be Windows.
        add_expansions_to_env: true
        script: |
          gzip <events.json >events.json.gz
    - command: s3.put
      type: setup
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: astrolabe-src/events.json.gz
        remote_file: ${project}/${version_id}/${build_id}-${task_id}-${execution}/events.json.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "events.json.gz"
        optional: true
    # If gzip doesn't exist (Windows?) upload the uncompressed events also.
    - command: s3.put
      type: setup
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: astrolabe-src/events.json
        remote_file: ${project}/${version_id}/${build_id}-${task_id}-${execution}/events.json
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/json}
        display_name: "events.json"
        optional: true

# Functions to run before the test.
pre:
  - func: "fetch source"
  - func: "install astrolabe"
  - func: "install driver"

# Functions to run after the test.
post:
  - func: "retrieve atlas logs"
  - func: "delete atlas cluster"
  - func: "upload test results"
  - func: "upload server logs"
  - func: "upload event logs"

tasks:
  # Linting and formatting
  - name: lint-and-format
    commands:
      - func: "lint and format"

  # Installation:
  - name: installation
    commands:
      - func: "install astrolabe"
      - func: "install driver"

  # Workload executor validation task (patch-only).
  - name: validate-workload-executor
    patch_only: true
    tags: ["all", "validate"]
    commands:
      - func: "validate executor"

  # Atlas test tasks
  # ================
  - name: atlas-retryReads-move-sharded
    tags: ["all", "atlas", "read1"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/move-sharded.yml
  - name: atlas-retryReads-move
    tags: ["all", "atlas", "read1"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/move.yml
  - name: atlas-retryReads-primaryRemoval
    tags: ["all", "atlas", "read2"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/primaryRemoval.yml
  - name: atlas-retryReads-primaryTakeover
    tags: ["all", "atlas", "read2"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/primaryTakeover.yml
  - name: atlas-retryReads-processRestart-sharded
    tags: ["all", "atlas", "read3"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/processRestart-sharded.yml
  - name: atlas-retryReads-processRestart
    tags: ["all", "atlas", "read3"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/processRestart.yml
  - name: atlas-retryReads-resizeCluster
    tags: ["all", "atlas", "read4"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/resizeCluster.yml
  - name: atlas-retryReads-testFailover-sharded
    tags: ["all", "atlas", "read4"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/testFailover-sharded.yml
  - name: atlas-retryReads-testFailover
    tags: ["all", "atlas", "read5"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/testFailover.yml
  - name: atlas-retryReads-toggleServerSideJS
    tags: ["all", "atlas", "read5"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/toggleServerSideJS.yml
  - name: atlas-retryReads-vmRestart-sharded
    tags: ["all", "atlas", "read6"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/vmRestart-sharded.yml
  - name: atlas-retryReads-vmRestart
    tags: ["all", "atlas", "read6"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/atlas/vmRestart.yml
  - name: atlas-retryWrites-resizeCluster
    tags: ["all", "atlas", "write1"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryWrites.yml
          TEST_FILE: tests/atlas/resizeCluster.yml
  - name: atlas-retryWrites-toggleServerSideJS
    tags: ["all", "atlas", "write1"]
    commands:
      - func: "run atlas test"
        vars:
          WORKLOAD_FILE: workloads/retryWrites.yml
          TEST_FILE: tests/atlas/toggleServerSideJS.yml

  # Kind test tasks
  # ===============
  - name: kind-retryReads-baseline
    tags: ["all", "kind"]
    commands:
      - func: "download kubernetes tools"
      - func: "create kind cluster"
      - func: "run kind test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/kubernetes/kind/baseline.yml
      - func: "retrieve kind logs"
      - func: "delete kind cluster"
  - name: kind-retryWrites-baseline
    tags: ["all", "kind"]
    commands:
      - func: "download kubernetes tools"
      - func: "create kind cluster"
      - func: "run kind test"
        vars:
          WORKLOAD_FILE: workloads/retryWrites.yml
          TEST_FILE: tests/kubernetes/kind/baseline.yml
      - func: "retrieve kind logs"
      - func: "delete kind cluster"
  - name: kind-retryReads-deletePod
    tags: ["all", "kind"]
    commands:
      - func: "download kubernetes tools"
      - func: "create kind cluster"
      - func: "run kind test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/kubernetes/kind/deletePod.yml
      - func: "retrieve kind logs"
      - func: "delete kind cluster"
  - name: kind-retryReads-upgrade
    tags: ["all", "kind"]
    commands:
      - func: "download kubernetes tools"
      - func: "create kind cluster"
      - func: "run kind test"
        vars:
          WORKLOAD_FILE: workloads/retryReads.yml
          TEST_FILE: tests/kubernetes/kind/upgrade.yml
      - func: "retrieve kind logs"
      - func: "delete kind cluster"
  - name: kind-retryWrites-upgrade
    tags: ["all", "kind"]
    commands:
      - func: "download kubernetes tools"
      - func: "create kind cluster"
      - func: "run kind test"
        vars:
          WORKLOAD_FILE: workloads/retryWrites.yml
          TEST_FILE: tests/kubernetes/kind/upgrade.yml
      - func: "retrieve kind logs"
      - func: "delete kind cluster"
  - name: kind-retryReads-scaleDown
    tags: ["all", "kind"]
    commands:
      - func: "download kubernetes tools"
      - func: "create kind cluster"
      - func: "run kind test"
        vars:
          TEST_FILE: tests/kubernetes/kind/scaleDown.yml
          WORKLOAD_FILE: workloads/reads.yml
      - func: "retrieve kind logs"
      - func: "delete kind cluster"
  - name: kind-retryWrites-scaleDown
    tags: ["all", "kind"]
    commands:
      - func: "download kubernetes tools"
      - func: "create kind cluster"
      - func: "run kind test"
        vars:
          TEST_FILE: tests/kubernetes/kind/scaleDown.yml
          WORKLOAD_FILE: workloads/retryWrites.yml
      - func: "retrieve kind logs"
      - func: "delete kind cluster"

axes:
  # The 'driver' axis specifies the driver to be tested (including driver version).
  # Drivers MUST specify the DRIVER_REPOSITORY and DRIVER_REVISION variables.
  - id: driver
    display_name: driver
    values:
      - id: pymongo-master
        display_name: "PyMongo (master)"
        variables:
          DRIVER_DIRNAME: "python/pymongo"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-python-driver"
          DRIVER_REVISION: "master"
          PYMONGO_VIRTUALENV_NAME: "pymongotestvenv"
          ASTROLABE_EXECUTOR_STARTUP_TIME: 5
      - id: ruby-master
        display_name: "Ruby (master)"
        variables:
          DRIVER_DIRNAME: "ruby"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-ruby-driver"
          DRIVER_REVISION: "master"
          ASTROLABE_EXECUTOR_STARTUP_TIME: 30
      - id: node-main
        display_name: "Node (main)"
        variables:
          DRIVER_DIRNAME: "node"
          DRIVER_REPOSITORY: "https://github.com/mongodb/node-mongodb-native"
          DRIVER_REVISION: "main"
          ASTROLABE_EXECUTOR_STARTUP_TIME: 45
      - id: java-master
        display_name: "Java (main)"
        variables:
          DRIVER_DIRNAME: "java/sync"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-java-driver"
          DRIVER_REVISION: "main"
          ASTROLABE_EXECUTOR_STARTUP_TIME: 15
      - id: dotnet-main
        display_name: "dotnet (main)"
        variables:
          DRIVER_DIRNAME: "dotnet"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-csharp-driver"
          DRIVER_REVISION: "main"
          ASTROLABE_EXECUTOR_STARTUP_TIME: 60
          # The .NET driver currently doesn't support loading TLS and CA certs from connection
          # string params, so override the standard Kind connection string with one that uses
          # "tlsInsecure=true" to ignore the validity of the custom CA and TLS certs that the Kind
          # clusters use.
          # TODO(DRIVERS-2428): Update .NET workload executor in Astrolabe to support TLS secrets.
          KIND_CONNSTRING: "mongodb://user:12345@localhost:31181,localhost:31182,localhost:31183/admin?tls=true&tlsInsecure=true"
      - id: go-master
        display_name: "Go (master)"
        variables:
          DRIVER_DIRNAME: "go"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-go-driver"
          DRIVER_REVISION: "master"
      - id: php-1x
        display_name: "PHP (1.x)"
        variables:
          DRIVER_DIRNAME: "php"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-php-library"
          DRIVER_REVISION: "v1.x"
          PHPC_REPO: "https://github.com/mongodb/mongo-php-driver"
          PHPC_BRANCH: "v1.x"
      - id: rust-main
        display_name: "Rust (main)"
        variables:
          DRIVER_DIRNAME: "rust"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-rust-driver"
          DRIVER_REVISION: "main"
          ASTROLABE_EXECUTOR_STARTUP_TIME: 10
      - id: c-master
        display_name: "C (master)"
        variables:
          DRIVER_DIRNAME: "c"
          DRIVER_REPOSITORY: "https://github.com/mongodb/mongo-c-driver"
          DRIVER_REVISION: "master"

  # The 'platform' axis specifies the evergreen host distro to use.
  # Platforms MUST specify the PYTHON3_BINARY variable as this is required to install astrolabe.
  - id: platform
    display_name: OS
    values:
      - id: ubuntu-18.04
        display_name: "Ubuntu 18.04"
        run_on: ubuntu1804-drivers-atlas-testing
        batchtime: 10080  # 7 days
        variables:
          PYTHON3_BINARY: "/opt/python/3.9/bin/python3"
          PYTHON_BIN_DIR: "bin"
          # Set locale to unicode - needed for astrolabe to function correctly.
          LC_ALL: "C.UTF-8"
          LANG: "C.UTF-8"
          # Use MongoDB 6.0 as rapid isn't available on 18.04 anymore
          MONGODB_VERSION: "6.0"
      - id: ubuntu-22.04
        display_name: "Ubuntu 22.04"
        run_on: ubuntu2204-drivers-atlas-testing
        batchtime: 10080  # 7 days
        variables:
          PYTHON3_BINARY: "/opt/python/3.9/bin/python3"
          PYTHON_BIN_DIR: "bin"
          # Set locale to unicode - needed for astrolabe to function correctly.
          LC_ALL: "C.UTF-8"
          LANG: "C.UTF-8"
      - id: windows-64
        display_name: "Windows 64"
        run_on: windows-64-vsMulti-small
        batchtime: 10080  # 7 days
        variables:
          PYTHON3_BINARY: "C:/python/Python38/python.exe"
          PYTHON_BIN_DIR: "Scripts"

  # The 'runtime' axis specifies the language runtime to use.
  # Runtimes SHOULD specify language and platform-specific variables needed by driver scripts.
  - id: runtime
    display_name: runtime
    values:
      - id: python39
        display_name: CPython-3
        variables:
          PYTHON_BINARY: "/opt/python/3.9/bin/python3"
      - id: python38-windows
        display_name: CPython-3.8-Windows
        variables:
          PYTHON_BINARY: "C:/python/Python38/python.exe"
      - id: ruby-32
        display_name: Ruby 3.2
        variables:
          RVM_RUBY: "ruby-3.2"
      - id: node-16
        display_name: Node v16
        variables:
          NODE_LTS_VERSION: 16
      - id: node-18
        display_name: Node v18
        variables:
          NODE_LTS_VERSION: 18
      - id: node-20
        display_name: Node v20
        variables:
          NODE_LTS_VERSION: 20
      - id: java17
        display_name: Java 17
        variables:
          JAVA_HOME: "/opt/java/jdk17"
      - id: dotnet-async-net6
        display_name: dotnet-async-net6
        variables:
          ASYNC: "true"
          FRAMEWORK: "net6.0"
      - id: dotnet-sync-net6
        display_name: dotnet-sync-net6
        variables:
          ASYNC: "false"
          FRAMEWORK: "net6.0"
      - id: dotnet-async-net8
        display_name: dotnet-async-net8
        variables:
          ASYNC: "true"
          FRAMEWORK: "net8.0"
      - id: dotnet-sync-net8
        display_name: dotnet-sync-net8
        variables:
          ASYNC: "false"
          FRAMEWORK: "net8.0"
      - id: go-20
        display_name: Go v1.20
        variables:
          GOROOT: /opt/golang/go1.20
          GOPATH: /home/ubuntu/go
      - id: php-82
        display_name: PHP 8.2
        variables:
          PHP_VERSION: 8.2
      - id: rust-latest
        display_name: Rust Latest
      - id: "c-clang"
        display_name: Clang
        variables:
          CC: /opt/mongodbtoolchain/v4/bin/clang
          CXX: /opt/mongodbtoolchain/v4/bin/clang++
          ASAN_SYMBOLIZER_PATH: /opt/mongodbtoolchain/v4/bin/llvm-symbolizer
      - id: "c-gcc"
        display_name: GCC
        variables:
          CC: /opt/mongodbtoolchain/v4/bin/gcc
          CXX: /opt/mongodbtoolchain/v4/bin/g++

task_groups:
  - name: lint_and_format_task_group
    setup_group:
      - func: "fetch source"
    tasks:
      - "lint-and-format"

buildvariants:
- name: lint-and-format
  display_name: "Lint and Format"
  run_on:
    - rhel8.7-large
  tasks:
    - name: "lint_and_format_task_group"

- matrix_name: "tests-ruby"
  matrix_spec:
    driver: ["ruby-master"]
    platform: ubuntu-22.04
    runtime: ruby-32
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"

- matrix_name: "tests-python"
  matrix_spec:
    driver: ["pymongo-master"]
    platform: ["ubuntu-22.04"]
    runtime: ["python39"]
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"
- matrix_name: "tests-python-windows"
  matrix_spec:
    driver: ["pymongo-master"]
    platform: ["windows-64"]
    runtime: ["python38-windows"]
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    # Kind tasks can't run on Windows, so exclude them.
    - ".all !.kind"
- matrix_name: tests-node-ubuntu-18
  matrix_spec:
    driver:
      - node-main
    platform:
      - ubuntu-18.04
    runtime:
      - node-16
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - .all
- matrix_name: tests-node-ubuntu-22
  matrix_spec:
    driver:
      - node-main
    platform:
      - ubuntu-22.04
    runtime:
      - node-18
      - node-20
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - .all
- matrix_name: "tests-java"
  matrix_spec:
    driver: ["java-master"]
    platform: ["ubuntu-18.04"]
    runtime: ["java17"]
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"
- matrix_name: "tests-dotnet-windows"
  matrix_spec:
    driver: ["dotnet-main"]
    platform: ["windows-64"]
    runtime:
      - "dotnet-async-net6"
      - "dotnet-sync-net6"
      - "dotnet-async-net8"
      - "dotnet-sync-net8"
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    # Kind tasks can't run on Windows, so exclude them.
    - ".all !.kind"
- matrix_name: "tests-dotnet-linux"
  matrix_spec:
    driver: ["dotnet-main"]
    platform: ["ubuntu-18.04"]
    runtime:
      - "dotnet-async-net6"
      - "dotnet-sync-net6"
      - "dotnet-async-net8"
      - "dotnet-sync-net8"
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    # Don't run Atlas tasks for the .NET driver on Linux.
    - ".all !.atlas"
- matrix_name: "tests-go"
  matrix_spec:
    driver: ["go-master"]
    platform: ubuntu-22.04
    runtime: go-20
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"
- matrix_name: "tests-php"
  matrix_spec:
    driver: ["php-1x"]
    platform: ubuntu-22.04
    runtime: php-82
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
    - ".all"
- matrix_name: "tests-rust"
  matrix_spec:
    driver: ["rust-main"]
    platform: ubuntu-22.04
    runtime: rust-latest
  display_name: "${driver} ${platform} ${runtime}"
  tasks:
   - ".all"
- matrix_name: "tests-c"
  display_name: "${driver} ${platform} ${runtime}"
  matrix_spec:
    driver: ["c-master"]
    platform: ["ubuntu-22.04"]
    runtime: ["c-gcc", "c-clang"]
  tasks:
    - ".all"
